{"ast":null,"code":"/*Шаблонные пепременные\r\nimport { Component} from '@angular/core';\r\n       \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<p>{{counter}}</p>`\r\n})\r\nexport class ChildComponent{\r\n     \r\n    counter: number = 0;\r\n    increment() { this.counter++; }\r\n    decrement() { this.counter--; }\r\n}\r\n*/\n/*Реализация всех методов\r\nimport { Component,\r\n    Input,\r\n    OnInit,\r\n    DoCheck,\r\n    OnChanges,\r\n   AfterContentInit,\r\n   AfterContentChecked,\r\n   AfterViewChecked,\r\n   AfterViewInit} from '@angular/core';\r\n \r\n@Component({\r\nselector: 'child-comp',\r\ntemplate: `<p>Привет {{name}}</p>`\r\n})\r\nexport class ChildComponent implements OnInit,\r\n    DoCheck,\r\n    OnChanges,\r\n   AfterContentInit,\r\n   AfterContentChecked,\r\n   AfterViewChecked,\r\n   AfterViewInit  {\r\n@Input() name: string = \"\";\r\ncount:number = 1;\r\n\r\nngOnInit() {\r\n  \r\n this.log(`ngOnInit`);\r\n}\r\nngOnChanges() {\r\n  \r\n this.log(`OnChanges`);\r\n}\r\nngDoCheck() {\r\n  \r\n this.log(`ngDoCheck`);\r\n}\r\nngAfterViewInit() {\r\n  \r\n this.log(`ngAfterViewInit`);\r\n}\r\nngAfterViewChecked() {\r\n  \r\n this.log(`ngAfterViewChecked`);\r\n}\r\nngAfterContentInit() {\r\n  \r\n this.log(`ngAfterContentInit`);\r\n}\r\nngAfterContentChecked() {\r\n  \r\n this.log(`ngAfterContentChecked`);\r\n}\r\n\r\nprivate log(msg: string) {\r\n   console.log(this.count + \". \" + msg);\r\n   this.count++;\r\n}\r\n}\r\n */\n/* nfOnChanges()\r\nimport { Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\n      \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<p>Привет {{name}}</p>`\r\n})\r\nexport class ChildComponent implements OnInit, OnChanges {\r\n    @Input() name: string = \"\";\r\n \r\n    constructor(){ this.log(`constructor`); }\r\n    ngOnInit() { this.log(`onInit`); }\r\n     \r\n    ngOnChanges(changes: SimpleChanges) {\r\n      for (let propName in changes) {\r\n        let chng = changes[propName];\r\n        let cur  = JSON.stringify(chng.currentValue);\r\n        let prev = JSON.stringify(chng.previousValue);\r\n        this.log(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);\r\n      }\r\n    }\r\n    private log(msg: string) {\r\n        console.log(msg);\r\n    }\r\n}\r\n*/\n/*Двустороняя привязка между свойств гл и дочер\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n       \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<input [ngModel]=\"userName\" (ngModelChange)=\"onNameChange($event)\" />`\r\n})\r\nexport class ChildComponent{\r\n     \r\n    @Input() userName:string = \"\";\r\n    @Output() userNameChange = new EventEmitter<string>();\r\n    onNameChange(model: string){\r\n         \r\n        this.userName = model;\r\n        this.userNameChange.emit(model);\r\n    }\r\n}\r\n*/\n/*Привязка к событиям дочернего компонента количетсво кликов\r\nimport { Component, EventEmitter, Input, Output} from '@angular/core';\r\n       \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<button (click)=\"change(true)\">+</button>\r\n               <button (click)=\"change(false)\">-</button>`\r\n})\r\nexport class ChildComponent{\r\n     \r\n    @Output() onChanged = new EventEmitter<boolean>();\r\n    change(increased:any) {\r\n        this.onChanged.emit(increased);\r\n    }\r\n}\r\n*/\n/*Передача данных главный компонент возраст передача возраста через гет-сет\r\nimport { Input, Component} from '@angular/core';\r\n       \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<p>Имя пользователя: {{userName}}</p>\r\n              <p>Возраст пользователя: {{userAge}}</p>`\r\n})\r\nexport class ChildComponent{\r\n    @Input() userName: string = \"\";\r\n     _userAge: number = 0;\r\n      \r\n    @Input()\r\n    set userAge(age:number) {\r\n        if(age<0)\r\n            this._userAge=0;\r\n        else if(age>100)\r\n            this._userAge=100;\r\n        else\r\n            this._userAge = age;\r\n  }\r\n  get userAge() { return this._userAge; }\r\n}\r\n*/\n/*Передача данных в главный компонент два элемента\r\nimport { Input, Component} from '@angular/core';\r\n      \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<p>Имя пользователя: {{userName}}</p>\r\n              <p>Возраст пользователя: {{userAge}}</p>`\r\n})\r\nexport class ChildComponent{\r\n    @Input() userName: string = \"\";\r\n    @Input() userAge: number = 0;\r\n}\r\n*/\n/* child.component 1\r\nimport { Component } from '@angular/core';\r\n      \r\n@Component({\r\n    selector: 'child-comp',\r\n    template: `<ng-content></ng-content>\r\n                <p>Привет {{name}}</p>`,\r\n    styles: [`h2, p {color:navy;}`]\r\n})\r\nexport class ChildComponent {\r\n    name= \"Евгений\";\r\n}\r\n*/","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}